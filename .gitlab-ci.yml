###############################
### Gitlab CI Pipeline (YAML) ###################
### Gitlab Group:           mca/VPImageServer ###
### Gitlab Project:        VPImageApplication ###
#################################################
###     !!!   DO NOT EDIT THIS FILE   !!!     ###
#################################################

# Pipeline Stages
stages:
  - MAVEN Verify
  - MAVEN Deploy
  - MAVEN Release
  - Fortify Upload
#  - Release Lifecycle

# GLOBAL variables
variables:
  M2: "/home/ubuntu/.m2"
  MAVEN_OPTS: "-Dmaven.repo.local=$M2/repository -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=yyyy-MM-dd-HH:mm:ss"

### TEMPLATES ###
#################

# TEMPLATE: Job executing MAVEN lifecycle goal
.MAVEN_Job_Template:
  tags:
    - kubernetes
  image: nexusjs.es.gk-software.com:20079/gkd-maven-base
  except:
    variables:
      - $AUTOMATED_RELEASE == 'true'
  artifacts:
    when: always
    paths:
      - maven-artifacts.txt
    expire_in: 1 year

### JOBS ###
############

# JOB: MAVEN lifecycle -> Verify (On Merge Request)
MAVEN Verify-On-Merge-Request:
  extends: .MAVEN_Job_Template
  stage: MAVEN Verify
  script:
    - mvn -B -s $M2/settings.xml verify
  only:
    - merge_requests

# JOB: MAVEN lifecycle -> Verify (Scheduled, schedule created on master and maintenance/*)
MAVEN Verify On-Schedule:
  extends: .MAVEN_Job_Template
  stage: MAVEN Verify
  script:
    - mvn -fae -B -s $M2/settings.xml verify
  only:
    - schedules

# JOB: MAVEN lifecycle -> Deploy (Manual, on master and maintenance/* only)
MAVEN Deploy:
  extends: .MAVEN_Job_Template
  stage: MAVEN Deploy
  variables:
    MVN_DEPLOY_OPTS: "-Pci,docker,helm,bom -DskipTests=true"
  script:
    - mvn -B -s $M2/settings.xml deploy $MVN_DEPLOY_OPTS | tee maven-output.txt
    - echo '--- Parsing maven output to gather artifacts  ---'
    - cat maven-output.txt | grep 'Installing.*to.*m2/repository/' | sed 's/.*Installing.* to .*m2\/repository\///' | sort | tee maven-artifacts.txt || /bin/true
  artifacts:
    paths:
      - server/image-server/target/*.jar
    expire_in: 2h
  only:
    refs:
      - master
    variables:
      - $CI_COMMIT_MESSAGE !~ /maven-release-plugin.*prepare release/
  resource_group: $CI_COMMIT_REF_NAME

# JOB: MAVEN lifecycle -> Release (copied from deploy job, but only triggered for maintenance branch)
MAVEN Release:
  extends: MAVEN Deploy
  stage: MAVEN Release
  variables:
    # the "mca-release" profile here is used to trigger enforcer plugin
    MVN_DEPLOY_OPTS: "-Pdocker,helm,bom,mca-release"
  script:
    - mvn -B -s $M2/settings.xml deploy $MVN_DEPLOY_OPTS | tee maven-output.txt
    - echo '--- Parsing maven output to gather artifacts  ---'
    - cat maven-output.txt | grep 'Installing.*to.*m2/repository/' | sed 's/.*Installing.* to .*m2\/repository\///' | sort | tee maven-artifacts.txt || /bin/true
  only:
    refs:
      - /^maintenance.*$/

## JOB: Delete Release
#Delete Release:
#  extends: .MAVEN_Job_Template
#  stage: Release Lifecycle
#  variables:
#    GIT_STRATEGY: none
#  script:
#    - echo "--- Artifacts to be deleted --- "
#    - cat maven-artifacts.txt
#  after_script:
#  except:
#    variables:
#  only:
#    - master
#    - /^maintenance.*$/
#  when: manual

Fortify Upload:
  tags:
    - kubernetes
  stage: Fortify Upload
  image: nexusjs.es.gk-software.com:17079/mca/fod-uploader
  script:
    - cd server/image-server/target
    - cp *.jar upload.zip
    - /upload.sh "$FORTIFY_API_CREDENTIALS_KEY" "$FORTIFY_API_CREDENTIALS_SECRET" $FORTIFY_RELEASE_ID upload.zip
  dependencies:
    - MAVEN Deploy
  only:
    variables:
      - $FORTIFY